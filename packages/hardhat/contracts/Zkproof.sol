// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Verifier {
    // Verifier contract (generated by ZoKrates or other ZKP tools)
    function verifyProof(
        uint[2] memory a,
        uint[2][2] memory b,
        uint[2] memory c,
        uint[1] memory input
    ) public view returns (bool r) {
        // Implementation provided by ZoKrates or other ZKP tools
    }
}

contract ProofStorage is Verifier {
    // Struct to store proof components
    struct Proof {
        uint[2] a;
        uint[2][2] b;
        uint[2] c;
    }

    // Mapping to store proofs by user address
    mapping(address => Proof) public proofs;

    // Event to be emitted when a proof is stored
    event ProofStored(address indexed user, Proof proof);

    // Function to store a proof
    function storeProof(
        uint[2] memory a,
        uint[2][2] memory b,
        uint[2] memory c
    ) public {
        Proof memory proof = Proof(a, b, c);
        proofs[msg.sender] = proof;
        emit ProofStored(msg.sender, proof);
    }

    // Function to verify a stored proof
    function verifyStoredProof(address user, uint[1] memory input) public view returns (bool) {
        Proof memory proof = proofs[user];
        return verifyProof(proof.a, proof.b, proof.c, input);
    }
}